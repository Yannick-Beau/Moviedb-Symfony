security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    password_hashers:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            # Nos users sont detype Entité Doctrine
            entity:
                # Dont la classe est celle-ci
                class: App\Entity\User
                # La propriété "de connexion/d'affichage"
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall
            # http_basic: true

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

            logout:
                path: app_logout
            custom_authenticator: App\Security\LoginFormAuthenticator
            # Seulement Si Front et Back sont sur le même domaine 
            json_login:
                check_path: /api/login

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        ### ==========
        ### Routes API
        ### ==========
        - { path: ^/api/movies, roles: ROLE_ADMIN, methods: [POST, PUT, PATCH, DELETE]}

        ### ======================
        ### Routes Application Web
        ### ======================
        # Front : Si user ANONYME : page d'accueil + fiche film seulement => rien à configurer, c'est l'accès par défaut

        # Front : Si ROLE_USER : ajouter une critique sur un film.
        - { path: ^/movie/\d+/add/review, roles: ROLE_USER}

        # Back : Admin : Sécuriser toutes les routes /add /edit /delete avec ROLE_ADMIN.
        # ^ = commence par
        # [a-z]+ = n'importe quel caractère de a à z (job, movie, user, etc.) de 1 à +
        - { path: ^/back/[a-z]+/(add|edit|delete), roles: ROLE_ADMIN }

        # Back : Si ROLE_MANAGER : accès aux pages de listes movie, genres etc. et pages show (si existantes).
        - { path: ^/back/[a-z]+/(browse|read), roles: ROLE_MANAGER }


    role_hierarchy:
        # ROLE_ADMIN hérite de ROLE_MANAGER
        ROLE_ADMIN: ROLE_MANAGER
        # Si on souhaite que les MANAGER et ADMIN se comportent comme un USER sur le front
        ROLE_MANAGER: ROLE_USER
        # C'est en cascade, donc TOLE_ADMIN => ROLE_USER aussi